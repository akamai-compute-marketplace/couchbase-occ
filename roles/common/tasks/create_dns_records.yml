---
# roles/common/tasks/create_dns_record.yml
# set dns facts when domain is defined
- name: set dns fact for subdomain
  set_fact:
    _domain: '{{ subdomain }}.{{ domain }}'
    cacheable: yes
  when:
    - domain is defined
    - subdomain != "www"
    
- name: set dns fact for domain
  set_fact:
    _domain: '{{ domain }}'
    cacheable: yes
  when: 
    - domain is defined
    - subdomain == "www"

# create dns records
- name: get host default IPv4 address
  debug:
    msg: "{{ ansible_default_ipv4.address }}"
  register: ip_address

# loop through domains the provided API token has grants to. Creating an A record without a zone, or creating a duplicate zone will fail the play.
- name: check existence of domain zone
  block:
    - name: lookup domain info
      linode.cloud.domain_info:
        api_token: "{{ token_password }}"
        domain: "{{ domain }}"
      register: domain_output
      when: domain is defined

    - name: print domain info
      ansible.builtin.debug:
        var: domain_output.zone_file.zone_file.0
      when: domain is defined

    - name: check domain existence
      ansible.builtin.debug:
        msg: "domain zone already exists"
      when: 
        - domain is defined
        - domain in domain_output.zone_file.zone_file.0
  rescue:
    - name: handle failure
      ansible.builtin.debug:
        msg: "domain zone does not exist"
      when: domain is defined

- name: create a dns zone
  linode.cloud.domain:
    api_token: "{{ token_password }}"
    domain: "{{ domain }}"
    state: present
    type: master
    soa_email: "{{ email_address }}"
  when:
    - domain is defined
    - domain_output.zone_file.zone_file.0 is not defined

- name: create A record for domain
  linode.cloud.domain_record:
    api_token: "{{ token_password }}"
    domain: "{{ domain }}"
    name: "{{ domain }}"
    type: 'A'
    target: "{{ ansible_default_ipv4.address }}"
    ttl_sec: 30
    state: present
  when:
    - domain is defined
    - subdomain == "www"

- name: create A record for subdomain
  linode.cloud.domain_record:
    api_token: "{{ token_password }}"
    domain: "{{ domain }}"
    name: "{{ subdomain }}"
    type: 'A'
    target: "{{ ansible_default_ipv4.address }}"
    ttl_sec: 30
    state: present
  when: 
    - domain is defined
    - subdomain is defined

- name: wait for DNS propogation
  ansible.builtin.pause: 
    minutes: 2
  when: domain is defined

- name: A record lookup for domain
  debug:
    msg: "{{ lookup('community.general.dig', domain, '@8.8.8.8') }}"
  register: dig_result
  until: ip_address.msg in dig_result.msg
  retries: 5
  delay: 10
  when:
    - domain is defined
    - subdomain == "www"

- name: A record lookup for subdomain
  debug:
    msg: "{{ lookup('community.general.dig', subdomain + '.' + domain, '@8.8.8.8') }}"
  register: dig_result
  until: ip_address.msg in dig_result.msg
  retries: 5
  delay: 10
  when:
    - domain is defined
    - subdomain != "www"